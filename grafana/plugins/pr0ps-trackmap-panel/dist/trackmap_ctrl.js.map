{"version":3,"sources":["../src/trackmap_ctrl.js"],"names":["log","msg","L","moment","appEvents","MetricsPanelCtrl","TrackMapCtrl","$scope","$injector","_","defaults","panel","maxDataPoints","autoZoom","scrollWheelZoom","defaultLayer","showLayerChanger","lineColor","pointColor","layers","tileLayer","attribution","maxZoom","forcedOverlay","subdomains","timeSrv","get","coords","leafMap","layerChanger","polyline","hoverMarker","hoverTarget","setSizePromise","events","on","onInitialized","bind","onViewModeChanged","onInitEditMode","onPanelTeardown","onPanelSizeChanged","onDataReceived","onDataSnapshotLoad","onRender","onPanelHover","onPanelClear","eachLayer","l","GridLayer","isLoading","once","renderingCompleted","render","addEditorTab","$timeout","cancel","evt","length","target","Math","floor","pos","x","addTo","min","max","idx","exact","timestamp","setLatLng","position","removeFrom","map","invalidateSize","enabled","disable","enable","hadMap","Boolean","setupMap","layer","removeControl","addControl","addDataToMap","id","zoomSnap","zoomDelta","control","circleMarker","latLng","color","fillColor","fillOpacity","weight","radius","mapBaseLayerChange","mapZoomToBox","e","overlay","options","setZIndex","zIndex","bounds","reduce","t","c","boxZoomBounds","contains","from","to","Infinity","isFinite","setTime","utc","zoomToFit","getBounds","isValid","fitBounds","setView","setStyle","data","lats","datapoints","lons","i","push","snapshotData","templateUrl"],"mappings":"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","sourcesContent":["import L from './leaflet/leaflet.js';\nimport moment from 'moment';\n\nimport appEvents from 'app/core/app_events';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nimport './leaflet/leaflet.css!';\nimport './partials/module.css!';\n\n\nfunction log(msg) {\n  // uncomment for debugging\n  //console.log(msg);\n}\n\nexport class TrackMapCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    log(\"constructor\");\n\n    _.defaults(this.panel, {\n      maxDataPoints: 500,\n      autoZoom: true,\n      scrollWheelZoom: false,\n      defaultLayer: 'OpenStreetMap',\n      showLayerChanger: true,\n      lineColor: 'red',\n      pointColor: 'royalblue',\n    });\n\n    // Save layers globally in order to use them in options\n    this.layers = {\n      'OpenStreetMap': L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n        maxZoom: 19\n      }),\n      'OpenTopoMap': L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data: &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\n        maxZoom: 17\n      }),\n      'Satellite': L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Imagery &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n        // This map doesn't have labels so we force a label-only layer on top of it\n        forcedOverlay: L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-labels/{z}/{x}/{y}.png', {\n          attribution: 'Labels by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n          subdomains: 'abcd',\n          maxZoom: 20,\n        })\n      })\n    };\n\n    this.timeSrv = $injector.get('timeSrv');\n    this.coords = [];\n    this.leafMap = null;\n    this.layerChanger = null;\n    this.polyline = null;\n    this.hoverMarker = null;\n    this.hoverTarget = null;\n    this.setSizePromise = null;\n\n    // Panel events\n    this.events.on('panel-initialized', this.onInitialized.bind(this));\n    this.events.on('view-mode-changed', this.onViewModeChanged.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-size-changed', this.onPanelSizeChanged.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n\n    // Global events\n    appEvents.on('graph-hover', this.onPanelHover.bind(this));\n    appEvents.on('graph-hover-clear', this.onPanelClear.bind(this));\n  }\n\n  onRender(){\n    log(\"onRender\")\n    // Wait until there is at least one GridLayer with fully loaded\n    // tiles before calling renderingCompleted\n    if (this.leafMap) {\n      this.leafMap.eachLayer((l) => {\n        if (l instanceof L.GridLayer){\n          if (l.isLoading()) {\n            l.once('load', this.renderingCompleted.bind(this));\n          }\n          else {\n            this.renderingCompleted();\n          }\n        }\n      });\n    }\n  }\n\n  onInitialized(){\n    log(\"onInitialized\");\n    this.render();\n  }\n\n  onInitEditMode() {\n    log(\"onInitEditMode\");\n    this.addEditorTab('Options', 'public/plugins/pr0ps-trackmap-panel/partials/options.html', 2);\n  }\n\n  onPanelTeardown() {\n    log(\"onPanelTeardown\");\n    this.$timeout.cancel(this.setSizePromise);\n  }\n\n  onPanelHover(evt) {\n    log(\"onPanelHover\");\n    if (this.coords.length === 0) {\n      return;\n    }\n\n    // check if we are already showing the correct hoverMarker\n    let target = Math.floor(evt.pos.x);\n    if (this.hoverTarget && this.hoverTarget === target) {\n      return;\n    }\n\n    // check for initial show of the marker\n    if (this.hoverTarget == null){\n      this.hoverMarker.addTo(this.leafMap);\n    }\n\n    this.hoverTarget = target;\n\n    // Find the currently selected time and move the hoverMarker to it\n    // Note that an exact match isn't always going to work due to rounding so\n    // we clean that up later (still more efficient)\n    let min = 0;\n    let max = this.coords.length - 1;\n    let idx = null;\n    let exact = false;\n    while (min <= max) {\n      idx = Math.floor((max + min) / 2);\n      if (this.coords[idx].timestamp === this.hoverTarget) {\n        exact = true;\n        break;\n      }\n      else if (this.coords[idx].timestamp < this.hoverTarget) {\n        min = idx + 1;\n      }\n      else {\n        max = idx - 1;\n      }\n    }\n\n    // Correct the case where we are +1 index off\n    if (!exact && idx > 0 && this.coords[idx].timestamp > this.hoverTarget) {\n      idx--;\n    }\n    this.hoverMarker.setLatLng(this.coords[idx].position);\n    this.render();\n  }\n\n  onPanelClear(evt) {\n    log(\"onPanelClear\");\n    // clear the highlighted circle\n    this.hoverTarget = null;\n    if (this.hoverMarker) {\n      this.hoverMarker.removeFrom(this.leafMap);\n    }\n  }\n\n  onViewModeChanged(){\n    log(\"onViewModeChanged\");\n    // KLUDGE: When the view mode is changed, panel resize events are not\n    //         emitted even if the panel was resized. Work around this by telling\n    //         the panel it's been resized whenever the view mode changes.\n    this.onPanelSizeChanged();\n  }\n\n  onPanelSizeChanged() {\n    log(\"onPanelSizeChanged\");\n    // KLUDGE: This event is fired too soon - we need to delay doing the actual\n    //         size invalidation until after the panel has actually been resized.\n    this.$timeout.cancel(this.setSizePromise);\n    let map = this.leafMap;\n    this.setSizePromise = this.$timeout(function(){\n      if (map) {\n        log(\"Invalidating map size\");\n        map.invalidateSize(true);\n      }}, 500\n    );\n  }\n\n  applyScrollZoom() {\n    let enabled = this.leafMap.scrollWheelZoom.enabled();\n    if (enabled != this.panel.scrollWheelZoom){\n      if (enabled){\n        this.leafMap.scrollWheelZoom.disable();\n      }\n      else{\n        this.leafMap.scrollWheelZoom.enable();\n      }\n    }\n  }\n\n  applyDefaultLayer() {\n    let hadMap = Boolean(this.leafMap);\n    this.setupMap();\n    if (hadMap){\n      // Re-add the default layer\n      this.leafMap.eachLayer((layer) => {\n        layer.removeFrom(this.leafMap);\n      });\n      this.layers[this.panel.defaultLayer].addTo(this.leafMap);\n\n      // Hide/show the layer switcher\n      this.leafMap.removeControl(this.layerChanger)\n      if (this.panel.showLayerChanger){\n        this.leafMap.addControl(this.layerChanger);\n      }\n    }\n    this.addDataToMap();\n  }\n\n  setupMap() {\n    log(\"setupMap\");\n    // Create the map or get it back in a clean state if it already exists\n    if (this.leafMap) {\n      if (this.polyline) {\n        this.polyline.removeFrom(this.leafMap);\n      }\n      this.onPanelClear();\n      return;\n    }\n\n    // Create the map\n    this.leafMap = L.map('trackmap-' + this.panel.id, {\n      scrollWheelZoom: this.panel.scrollWheelZoom,\n      zoomSnap: 0.5,\n      zoomDelta: 1,\n    });\n\n    // Create the layer changer\n    this.layerChanger = L.control.layers(this.layers)\n\n    // Add layers to the control widget\n    if (this.panel.showLayerChanger){\n      this.leafMap.addControl(this.layerChanger);\n    }\n\n    // Add default layer to map\n    this.layers[this.panel.defaultLayer].addTo(this.leafMap);\n\n    // Hover marker\n    this.hoverMarker = L.circleMarker(L.latLng(0, 0), {\n      color: 'white',\n      fillColor: this.panel.pointColor,\n      fillOpacity: 1,\n      weight: 2,\n      radius: 7\n    });\n\n    // Events\n    this.leafMap.on('baselayerchange', this.mapBaseLayerChange.bind(this));\n    this.leafMap.on('boxzoomend', this.mapZoomToBox.bind(this));\n  }\n\n  mapBaseLayerChange(e) {\n    // If a tileLayer has a 'forcedOverlay' attribute, always enable/disable it\n    // along with the layer\n    if (this.leafMap.forcedOverlay) {\n      this.leafMap.forcedOverlay.removeFrom(this.leafMap);\n      this.leafMap.forcedOverlay = null;\n    }\n    let overlay = e.layer.options.forcedOverlay;\n    if (overlay) {\n      overlay.addTo(this.leafMap);\n      overlay.setZIndex(e.layer.options.zIndex + 1);\n      this.leafMap.forcedOverlay = overlay;\n    }\n  }\n\n  mapZoomToBox(e) {\n    log(\"mapZoomToBox\");\n    // Find time bounds of selected coordinates\n    const bounds = this.coords.reduce(\n      function(t, c) {\n        if (e.boxZoomBounds.contains(c.position)) {\n          t.from = Math.min(t.from, c.timestamp);\n          t.to = Math.max(t.to, c.timestamp);\n        }\n        return t;\n      },\n      {from: Infinity, to: -Infinity}\n    );\n\n    // Set the global time range\n    if (isFinite(bounds.from) && isFinite(bounds.to)) {\n      // KLUDGE: Create moment objects here to avoid a TypeError that\n      //         occurs when Grafana processes normal numbers\n      this.timeSrv.setTime({\n        from: moment.utc(bounds.from),\n        to: moment.utc(bounds.to)\n      });\n    }\n    this.render();\n  }\n\n  // Add the circles and polyline to the map\n  addDataToMap() {\n    log(\"addDataToMap\");\n    this.polyline = L.polyline(\n      this.coords.map(x => x.position, this), {\n        color: this.panel.lineColor,\n        weight: 3,\n      }\n    ).addTo(this.leafMap);\n\n    this.zoomToFit();\n  }\n\n  zoomToFit(){\n    log(\"zoomToFit\");\n    if (this.panel.autoZoom && this.polyline){\n      var bounds = this.polyline.getBounds();\n      if (bounds.isValid()){\n        this.leafMap.fitBounds(bounds);\n      }\n      else {\n        this.leafMap.setView([0, 0], 1);\n      }\n    }\n    this.render();\n  }\n\n  refreshColors() {\n    log(\"refreshColors\");\n    if (this.polyline) {\n      this.polyline.setStyle({\n        color: this.panel.lineColor\n      });\n    }\n    if (this.hoverMarker){\n      this.hoverMarker.setStyle({\n        fillColor: this.panel.pointColor,\n      });\n    }\n    this.render();\n  }\n\n  onDataReceived(data) {\n    log(\"onDataReceived\");\n    this.setupMap();\n\n    if (data.length === 0 || data.length !== 2) {\n      // No data or incorrect data, show a world map and abort\n      this.leafMap.setView([0, 0], 1);\n      this.render();\n      return;\n    }\n\n    // Asumption is that there are an equal number of properly matched timestamps\n    // TODO: proper joining by timestamp?\n    this.coords.length = 0;\n    const lats = data[0].datapoints;\n    const lons = data[1].datapoints;\n    for (let i = 0; i < lats.length; i++) {\n      if (lats[i][0] == null || lons[i][0] == null ||\n          lats[i][1] !== lons[i][1]) {\n        continue;\n      }\n\n      this.coords.push({\n        position: L.latLng(lats[i][0], lons[i][0]),\n        timestamp: lats[i][1]\n      });\n    }\n    this.addDataToMap();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    log(\"onSnapshotLoad\");\n    this.onDataReceived(snapshotData);\n  }\n}\n\nTrackMapCtrl.templateUrl = 'partials/module.html';\n"],"file":"trackmap_ctrl.js"}